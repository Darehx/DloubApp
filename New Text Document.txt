// src/components/Sidebar.tsx
import React, { useState } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';

interface SidebarProps {
  logo?: string; // URL del logo
  navigation?: {
    name: string;
    href: string;
    icon?: React.ReactNode;
    exact?: boolean;
  }[];
  profileOptions?: {
    name: string;
    href?: string;
    onClick?: () => void;
  }[];
}

const Sidebar = ({ logo, navigation = [], profileOptions = [] }: SidebarProps) => {
  const [isOpen, setIsOpen] = useState(false);
  const { pathname } = useLocation();
  const { isAuthenticated, user, logout } = useAuth();
  const navigate = useNavigate();

  // No mostrar el Sidebar si el usuario no está autenticado
  if (!isAuthenticated) return null;

  // Opciones de navegación por defecto
  const defaultNav = [
    {
      name: 'Dashboard',
      href: '/dashboard',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
        </svg>
      ),
      exact: true,
    },
    {
      name: 'Empleados',
      href: '/employees',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
      ),
    },
    {
      name: 'Órdenes',
      href: '/orders',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
        </svg>
      ),
    },
    {
      name: 'Servicios',
      href: '/services',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
        </svg>
      ),
    },
  ];

  // Opciones de perfil por defecto
  const defaultProfileOptions = [
    { name: 'Perfil', href: '/profile' },
    {
      name: 'Cerrar sesión',
      onClick: () => {
        logout(); // Cierra la sesión
        navigate('/login'); // Redirige al login
      },
    },
  ];

  // Combina las opciones personalizadas con las por defecto
  const navItems = navigation.length > 0 ? navigation : defaultNav;
  const profileItems = profileOptions.length > 0 ? profileOptions : defaultProfileOptions;

  // Función para determinar si un enlace está activo
  const isActive = (href: string, exact = false) => {
    return exact ? pathname === href : pathname.startsWith(href);
  };

  return (
    <>
      {/* Botón móvil para abrir/cerrar el Sidebar */}
      <button
        className="fixed top-4 left-4 z-50 sm:hidden p-2 bg-gray-800 text-white rounded-md shadow-lg"
        onClick={() => setIsOpen(!isOpen)}
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16m-7 6h7" />
        </svg>
      </button>

      {/* Sidebar */}
      <aside
        className={`fixed inset-y-0 left-0 z-40 w-72 bg-gray-800 text-white shadow-lg transition-transform duration-300 ease-in-out ${
          isOpen ? 'translate-x-0' : '-translate-x-full'
        } sm:translate-x-0`}
      >
        <div className="flex h-full flex-col justify-between overflow-y-auto px-4 py-6">
          {/* Logo */}
          <div className="mb-8 flex items-center justify-center">
            <img
              alt="Logo"
              src={logo || "https://tailwindui.com/plus-assets/img/logos/mark.svg?color=indigo&shade=500"}
              className="h-10 w-auto"
            />
          </div>

          {/* Navegación */}
          <nav className="space-y-2">
            {navItems.map((item) => (
              <Link
                key={item.name}
                to={item.href}
                onClick={() => setIsOpen(false)} // Cierra el Sidebar en móviles
                className={`
                  flex items-center rounded-md px-3 py-2 text-sm font-medium
                  ${isActive(item.href, item.exact)
                    ? 'bg-gray-900 text-white'
                    : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                  }
                `}
              >
                {item.icon && <span className="mr-3">{item.icon}</span>}
                <span>{item.name}</span>
              </Link>
            ))}
          </nav>

          {/* Perfil */}
          <div className="mt-6 space-y-4">
            <div className="flex items-center space-x-3">
              <img
                alt="Avatar"
                src={user?.avatar || "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"}
                className="h-10 w-10 rounded-full"
              />
              <div>
                <p className="text-sm font-medium text-white">
                  {user?.name || 'Usuario'}
                </p>
                <p className="text-xs text-gray-400">
                  {user?.role || 'Administrador'}
                </p>
              </div>
            </div>
            <div className="space-y-1">
              {profileItems.map((option) => (
                <div key={option.name}>
                  {option.href ? (
                    <Link
                      to={option.href}
                      className="block rounded-md px-3 py-2 text-sm font-medium text-gray-300 hover:bg-gray-700 hover:text-white"
                      onClick={() => setIsOpen(false)} // Cierra el Sidebar en móviles
                    >
                      {option.name}
                    </Link>
                  ) : (
                    <button
                      onClick={option.onClick}
                      className="block w-full rounded-md px-3 py-2 text-left text-sm font-medium text-gray-300 hover:bg-gray-700 hover:text-white"
                    >
                      {option.name}
                    </button>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>
      </aside>

      {/* Overlay móvil para cerrar el Sidebar */}
      {isOpen && (
        <div
          className="fixed inset-0 z-30 bg-black/50 sm:hidden"
          onClick={() => setIsOpen(false)}
        ></div>
      )}
    </>
  );
};

export default Sidebar;

// src/context/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect } from 'react';

interface AuthContextType {
  accessToken: string | null;
  refreshToken: string | null;
  isAuthenticated: boolean;
  user: {
    name?: string;
    role?: string;
    avatar?: string;
  } | null;
  login: (access: string, refresh: string, userData: any) => void;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | null>(null);

interface AuthProviderProps {
  children: React.ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [accessToken, setAccessToken] = useState<string | null>(localStorage.getItem('access_token'));
  const [refreshToken, setRefreshToken] = useState<string | null>(localStorage.getItem('refresh_token'));
  const [user, setUser] = useState<any>(JSON.parse(localStorage.getItem('user') || 'null'));

  const isAuthenticated = !!accessToken;

  const login = (access: string, refresh: string, userData: any) => {
    localStorage.setItem('access_token', access);
    localStorage.setItem('refresh_token', refresh);
    localStorage.setItem('user', JSON.stringify(userData));
    setAccessToken(access);
    setRefreshToken(refresh);
    setUser(userData);
  };

  const logout = () => {
    localStorage.removeItem('access_token');
    localStorage.removeItem('refresh_token');
    localStorage.removeItem('user');
    setAccessToken(null);
    setRefreshToken(null);
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ accessToken, refreshToken, isAuthenticated, user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) throw new Error('useAuth debe usarse dentro de AuthProvider');
  return context;
};

// src/components/App.tsx
import React from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import Login from './auth/Login';
import Dashboard from './dashboard/Dashboard';
import Employees from './components/employees/Employees';
import Orders from './components/orders/Orders';
import Services from './components/services/Services';
import Profile from './components/Profile/Profile';
import Sidebar from './components/common/Sidebar';

const App = () => {
  return (
    <AuthProvider>
      <BrowserRouter>
        <div className="flex h-screen">
          {/* Sidebar */}
          <Sidebar
            logo="/logo.png"
            navigation={[
              { name: 'Dashboard', href: '/dashboard', icon: <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" /></svg>, exact: true },
              { name: 'Empleados', href: '/employees', icon: <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" /></svg> },
              { name: 'Órdenes', href: '/orders', icon: <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" /></svg> },
              { name: 'Servicios', href: '/services', icon: <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" /></svg> },
            ]}
            profileOptions={[
              { name: 'Perfil', href: '/profile' },
              {
                name: 'Cerrar sesión',
                onClick: () => {
                  console.log('Cerrando sesión...');
                },
              },
            ]}
          />

          {/* Contenido principal */}
          <div className="flex-1 overflow-y-auto bg-gray-100 p-6">
            <Routes>
              {/* Rutas públicas */}
              <Route path="/" element={<Navigate to="/dashboard" />} />
              <Route path="/login" element={<Login />} />

              {/* Rutas protegidas */}
              <Route path="/dashboard" element={<Dashboard />} />
              <Route path="/employees" element={<Employees />} />
              <Route path="/orders" element={<Orders />} />
              <Route path="/services" element={<Services />} />
              <Route path="/profile" element={<Profile />} />
            </Routes>
          </div>
        </div>
      </BrowserRouter>
    </AuthProvider>
  );
};

export default App;

necesito agregar react icons, y el logout sigue sin funcionar