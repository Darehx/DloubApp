
views.py: from rest_framework import viewsets, generics, permissions, status
from rest_framework.response import Response
from rest_framework.decorators import action
from .models import *
from .serializers import *
from rest_framework_simplejwt.views import TokenObtainPairView
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework_simplejwt.views import TokenObtainPairView
from .serializers import CustomTokenObtainPairSerializer
import logging

logger = logging.getLogger(__name__)




class CustomTokenObtainPairView(TokenObtainPairView):
    serializer_class = CustomTokenObtainPairSerializer

    def post(self, request, *args, **kwargs):
        logger.debug("Solicitud POST recibida en CustomTokenObtainPairView")
        return super().post(request, *args, **kwargs)
    
# ---------------------- Servicios de Aplicación ----------------------
class FormResponseService:
    @staticmethod
    def bulk_create_responses(validated_data, customer):
        form = validated_data['form']
        responses = [
            FormResponse(
                customer=customer,
                form=form,
                question=FormQuestion.objects.get(id=item['question']),
                text=item['text']
            ) for item in validated_data['responses']
        ]
        return FormResponse.objects.bulk_create(responses)

# ---------------------- Formularios ----------------------
class FormResponseViewSet(viewsets.ModelViewSet):
    serializer_class = FormResponseSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return FormResponse.objects.filter(customer=self.request.user.customer_profile)

    def perform_create(self, serializer):
        if not hasattr(self.request.user, 'customer_profile'):
            raise serializers.ValidationError("El usuario no tiene un perfil de cliente.")
        serializer.save(customer=self.request.user.customer_profile)

    @action(detail=False, methods=['post'])
    def bulk_create(self, request):
        serializer = FormResponseBulkCreateSerializer(
            data=request.data,
            context={'request': request}
        )
        if serializer.is_valid():
            customer = self.request.user.customer_profile
            FormResponseService.bulk_create_responses(serializer.validated_data, customer)
            return Response(
                {"message": "Respuestas creadas exitosamente"},
                status=status.HTTP_201_CREATED
            )
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# ---------------------- Usuarios y Perfiles ----------------------
class CustomerViewSet(viewsets.ModelViewSet):
    queryset = Customer.objects.all()
    serializer_class = CustomerSerializer
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['user__email', 'preferred_contact_method']

    def get_serializer_class(self):
        if self.action == 'create':
            return CustomerCreateSerializer
        return super().get_serializer_class()

    def get_permissions(self):
        if self.action == 'create':
            return [permissions.AllowAny()]
        return [permissions.IsAuthenticated()]

class EmployeeViewSet(viewsets.ModelViewSet):
    queryset = Employee.objects.all()
    serializer_class = EmployeeSerializer
    permission_classes = [permissions.IsAdminUser]
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['position', 'active']

    def get_serializer_class(self):
        if self.action == 'create':
            return EmployeeCreateSerializer
        return super().get_serializer_class()
    
class JobPositionViewSet(viewsets.ModelViewSet):
    queryset = JobPosition.objects.all()
    serializer_class = JobPositionSerializer
    permission_classes = [permissions.IsAuthenticated]

# ---------------------- Gestión de Pedidos ----------------------
class OrderViewSet(viewsets.ModelViewSet):
    queryset = Order.objects.all()
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['status', 'customer', 'priority']

    def get_queryset(self):
        user = self.request.user
        if hasattr(user, 'employee_profile'):
            return Order.objects.all().select_related('customer')
        return Order.objects.filter(customer=user.customer_profile).select_related('customer')

    def perform_create(self, serializer):
        if hasattr(self.request.user, 'employee_profile'):
            serializer.save(employee=self.request.user.employee_profile)
        else:
            serializer.save(customer=self.request.user.customer_profile)

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        # Manejo de servicios
        services_data = serializer.validated_data.pop('services', [])
        order = serializer.save()

        for service_data in services_data:
            if 'service' not in service_data or 'quantity' not in service_data or 'price' not in service_data:
                raise serializers.ValidationError("Datos de servicio incompletos.")
            OrderService.objects.create(order=order, **service_data)

        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)

class DeliverableViewSet(viewsets.ModelViewSet):
    serializer_class = DeliverableSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        order_id = self.kwargs.get('order_id')
        return Deliverable.objects.filter(order_id=order_id)

    def perform_create(self, serializer):
        order_id = self.kwargs.get('order_id')
        try:
            order = Order.objects.get(id=order_id)
        except Order.DoesNotExist:
            raise serializers.ValidationError("El pedido especificado no existe.")
        serializer.save(order=order)

# ---------------------- Servicios y Catálogo ----------------------
class ServiceViewSet(viewsets.ModelViewSet):
    queryset = Service.objects.filter(is_active=True)
    serializer_class = ServiceSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['code', 'ventulab', 'campaign']

class CampaignViewSet(viewsets.ModelViewSet):
    queryset = Campaign.objects.all()
    serializer_class = CampaignSerializer
    permission_classes = [permissions.IsAuthenticated]
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['start_date', 'end_date']

# ---------------------- Gestión de Pagos ----------------------
class InvoiceViewSet(viewsets.ModelViewSet):
    serializer_class = InvoiceSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        if not hasattr(self.request.user, 'customer_profile'):
            raise serializers.ValidationError("El usuario no tiene un perfil de cliente.")
        return Invoice.objects.filter(order__customer=self.request.user.customer_profile)

class PaymentViewSet(viewsets.ModelViewSet):
    serializer_class = PaymentSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        if not hasattr(self.request.user, 'customer_profile'):
            raise serializers.ValidationError("El usuario no tiene un perfil de cliente.")
        return Payment.objects.filter(invoice__order__customer=self.request.user.customer_profile)


Serializer.py
from rest_framework import serializers
from .models import *
from django.contrib.auth.models import User
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer

# ---------------------- Autenticación ----------------------
class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):
    @classmethod
    def get_token(cls, user):
        token = super().get_token(user)

        # Agregar claims personalizados al token
        token['role'] = 'customer' if hasattr(user, 'customer_profile') else 'employee'
        token['full_name'] = user.get_full_name()

        return token
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'first_name', 'last_name']

# ---------------------- Formularios ----------------------
class FormSerializer(serializers.ModelSerializer):
    class Meta:
        model = Form
        fields = '__all__'

class FormQuestionSerializer(serializers.ModelSerializer):
    class Meta:
        model = FormQuestion
        fields = '__all__'

class FormResponseSerializer(serializers.ModelSerializer):
    class Meta:
        model = FormResponse
        fields = ['id', 'customer', 'form', 'question', 'text', 'created_at']
        read_only_fields = ['customer', 'created_at']

class FormResponseBulkCreateSerializer(serializers.Serializer):
    customer = serializers.IntegerField()
    form = serializers.IntegerField()
    responses = serializers.ListField(
        child=serializers.DictField(
            child=serializers.CharField(max_length=1000)
        )
    )

    def validate(self, data):
        # Validar que el cliente exista
        try:
            customer = Customer.objects.get(id=data['customer'])
        except Customer.DoesNotExist:
            raise serializers.ValidationError({"customer": "Cliente no encontrado."})

        # Validar que el formulario exista
        try:
            form = Form.objects.get(id=data['form'])
        except Form.DoesNotExist:
            raise serializers.ValidationError({"form": "Formulario no encontrado."})

        # Validar que las preguntas existan
        for response in data['responses']:
            question_id = response.get('question')
            if not question_id:
                raise serializers.ValidationError({"responses": "Falta el campo 'question' en una respuesta."})
            try:
                FormQuestion.objects.get(id=question_id, form=form)
            except FormQuestion.DoesNotExist:
                raise serializers.ValidationError({"responses": f"Pregunta con ID {question_id} no encontrada en el formulario."})

        return data

    def create(self, validated_data):
        customer_id = validated_data['customer']
        form_id = validated_data['form']
        responses_data = validated_data['responses']

        customer = Customer.objects.get(id=customer_id)
        form = Form.objects.get(id=form_id)

        responses = [
            FormResponse(
                customer=customer,
                form=form,
                question_id=response['question'],
                text=response['text']
            ) for response in responses_data
        ]

        return FormResponse.objects.bulk_create(responses)

# ---------------------- Usuarios y Perfiles ----------------------

class JobPositionSerializer(serializers.ModelSerializer):
    class Meta:
        model = JobPosition
        fields = '__all__'


class CustomerCreateSerializer(serializers.ModelSerializer):
    user = UserSerializer()

    class Meta:
        model = Customer
        fields = ['user', 'phone', 'address', 'date_of_birth', 'preferred_contact_method']

    def create(self, validated_data):
        user_data = validated_data.pop('user')
        user = User.objects.create_user(
            username=user_data['username'],
            email=user_data['email'],
            password=user_data.get('password', ''),
            first_name=user_data.get('first_name', ''),
            last_name=user_data.get('last_name', '')
        )
        customer = Customer.objects.create(user=user, **validated_data)
        return customer

class CustomerSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)

    class Meta:
        model = Customer
        fields = '__all__'
        read_only_fields = ['created_at']

class EmployeeCreateSerializer(serializers.ModelSerializer):
    user = UserSerializer()

    class Meta:
        model = Employee
        fields = ['user', 'position', 'address', 'salary', 'active']

    def create(self, validated_data):
        user_data = validated_data.pop('user')
        user = User.objects.create_user(
            username=user_data['username'],
            email=user_data['email'],
            password=user_data.get('password', ''),
            first_name=user_data.get('first_name', ''),
            last_name=user_data.get('last_name', '')
        )
        employee = Employee.objects.create(user=user, **validated_data)
        return employee

class EmployeeSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    position = serializers.StringRelatedField()

    class Meta:
        model = Employee
        fields = '__all__'
        read_only_fields = ['hire_date']

# ---------------------- Gestión de Pedidos ----------------------
class OrderServiceSerializer(serializers.ModelSerializer):
    service_name = serializers.CharField(source='service.name', read_only=True)

    class Meta:
        model = OrderService
        fields = ['id', 'service', 'service_name', 'quantity', 'price', 'note']

class OrderSerializer(serializers.ModelSerializer):
    customer = serializers.PrimaryKeyRelatedField(queryset=Customer.objects.all())
    employee = serializers.PrimaryKeyRelatedField(queryset=Employee.objects.all(), required=False)
    services = OrderServiceSerializer(many=True, source='services')
    status_display = serializers.SerializerMethodField()

    class Meta:
        model = Order
        fields = '__all__'
        read_only_fields = ['date_received', 'status']

    def get_status_display(self, obj):
        return obj.get_status_display()

    def create(self, validated_data):
        services_data = validated_data.pop('services', [])
        order = Order.objects.create(**validated_data)

        for service_data in services_data:
            OrderService.objects.create(order=order, **service_data)

        return order

class DeliverableSerializer(serializers.ModelSerializer):
    preview_url = serializers.SerializerMethodField()

    class Meta:
        model = Deliverable
        fields = '__all__'
        read_only_fields = ['version', 'approved', 'created_at']

    def get_preview_url(self, obj):
        return obj.file.url if obj.file else None

# ---------------------- Gestión de Pagos ----------------------
class PaymentMethodSerializer(serializers.ModelSerializer):
    class Meta:
        model = PaymentMethod
        fields = '__all__'

class InvoiceSerializer(serializers.ModelSerializer):
    total_amount = serializers.DecimalField(max_digits=12, decimal_places=2, read_only=True)

    class Meta:
        model = Invoice
        fields = '__all__'
        read_only_fields = ['date', 'paid_amount']

class PaymentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Payment
        fields = '__all__'
        read_only_fields = ['date']

# ---------------------- Servicios y Catálogo ----------------------
class SubServiceSerializer(serializers.ModelSerializer):
    class Meta:
        model = SubService
        fields = '__all__'

class ServiceSerializer(serializers.ModelSerializer):
    subservices = SubServiceSerializer(many=True, read_only=True)
    current_price = serializers.SerializerMethodField()

    class Meta:
        model = Service
        fields = '__all__'

    def get_current_price(self, obj):
        price = obj.price_set.last()
        return {
            'amount': price.amount if price else 0,
            'currency': price.currency if price else 'USD'
        }

# ---------------------- Campañas ----------------------
class CampaignSerializer(serializers.ModelSerializer):
    class Meta:
        model = Campaign
        fields = '__all__'

class CampaignServiceSerializer(serializers.ModelSerializer):
    class Meta:
        model = CampaignService
        fields = '__all__'
        
# ---------------------- Gestión de Pagos ----------------------
class TransactionTypeSerializer(serializers.ModelSerializer):
    class Meta:
        model = TransactionType
        fields = '__all__'

# ---------------------- Proveedores y Colaboradores ----------------------
class ProviderSerializer(serializers.ModelSerializer):
    services = serializers.StringRelatedField(many=True)  # Muestra los nombres de los servicios relacionados

    class Meta:
        model = Provider
        fields = '__all__'

# ---------------------- Mejoras Adicionales ----------------------
class NotificationSerializer(serializers.ModelSerializer):
    class Meta:
        model = Notification
        fields = '__all__'
        read_only_fields = ['created_at']

class AuditLogSerializer(serializers.ModelSerializer):
    class Meta:
        model = AuditLog
        fields = '__all__'
        read_only_fields = ['timestamp']
        
from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
import datetime

# ---------------------- Modelos Base ----------------------
@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        if hasattr(instance, 'is_staff') and instance.is_staff:
            Employee.objects.create(user=instance)
        else:
            Customer.objects.create(user=instance)

# ---------------------- Formularios ----------------------
class Form(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name

class FormQuestion(models.Model):
    form = models.ForeignKey(Form, on_delete=models.CASCADE)
    question_text = models.TextField()
    order = models.PositiveIntegerField(default=0)
    required = models.BooleanField(default=True)

    class Meta:
        ordering = ['order']

    def __str__(self):
        return f"{self.form.name} - Pregunta {self.order}"

class FormResponse(models.Model):
    customer = models.ForeignKey('Customer', on_delete=models.CASCADE)
    form = models.ForeignKey(Form, on_delete=models.CASCADE)
    question = models.ForeignKey(FormQuestion, on_delete=models.CASCADE)
    text = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('customer', 'form', 'question')

    def __str__(self):
        return f"Respuesta de {self.customer} a {self.question}"

# ---------------------- Gestión de Clientes ----------------------
class Customer(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='customer_profile')
    phone = models.CharField(max_length=20, null=True, blank=True)
    address = models.TextField(null=True, blank=True)
    date_of_birth = models.DateField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    preferred_contact_method = models.CharField(max_length=20, choices=[
        ('email', 'Email'),
        ('phone', 'Phone'),
        ('other', 'Other')
    ], null=True, blank=True)
    brand_guidelines = models.FileField(upload_to='brand_guidelines/', null=True, blank=True)

    def __str__(self):
        return f"{self.user.get_full_name()} - {self.user.email}"

class CustomerProject(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    description = models.TextField(null=True, blank=True)
    status = models.CharField(max_length=50, choices=[
        ('ongoing', 'Ongoing'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled')
    ], default='ongoing')
    form = models.ForeignKey(Form, on_delete=models.SET_NULL, null=True, blank=True)
    moodboard = models.URLField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.customer} - {self.name}"

# ---------------------- Gestión de Empleados ----------------------
class JobPosition(models.Model):
    name = models.CharField(max_length=50)
    description = models.TextField(null=True, blank=True)
    permissions = models.JSONField(default=dict)

    def __str__(self):
        return self.name

class Employee(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='employee_profile')
    hire_date = models.DateField(default=datetime.date.today)
    address = models.TextField(null=True, blank=True)
    salary = models.DecimalField(max_digits=10, decimal_places=2)
    active = models.BooleanField(default=True)
    position = models.ForeignKey(JobPosition, on_delete=models.SET_NULL, null=True, blank=True)
    projects = models.ManyToManyField(CustomerProject, through='EmployeeAssignment')

    def __str__(self):
        return f"{self.user.get_full_name()} - {self.position}"

class EmployeeAssignment(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE)
    project = models.ForeignKey(CustomerProject, on_delete=models.CASCADE)
    role = models.CharField(max_length=100)
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)

    class Meta:
        ordering = ['-start_date']

    def __str__(self):
        return f"{self.employee} en {self.project}"

# ---------------------- Gestión de Pedidos ----------------------
class Order(models.Model):
    STATUS_CHOICES = [
        ('draft', 'Borrador'),
        ('confirmed', 'Confirmado'),
        ('in_progress', 'En Proceso'),
        ('quality_check', 'Control de Calidad'),
        ('delivered', 'Entregado'),
        ('cancelled', 'Cancelado')
    ]
    
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    employee = models.ForeignKey(Employee, null=True, blank=True, on_delete=models.SET_NULL)
    date_received = models.DateTimeField(auto_now_add=True)
    date_required = models.DateTimeField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')
    payment_due_date = models.DateTimeField(null=True, blank=True)
    note = models.TextField(null=True, blank=True)
    priority = models.PositiveIntegerField(default=1)

    def __str__(self):
        return f"Orden #{self.id} - {self.customer}"

class OrderService(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='services')
    service = models.ForeignKey('Service', on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    note = models.TextField(blank=True)

    class Meta:
        verbose_name_plural = "Order Services"

    def __str__(self):
        return f"{self.order} - {self.service}"

class Deliverable(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    file = models.FileField(upload_to='deliverables/')
    description = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    version = models.PositiveIntegerField(default=1)
    approved = models.BooleanField(default=False)

    def __str__(self):
        return f"Entregable v{self.version} para {self.order}"

# ---------------------- Gestión de Pagos ----------------------
class TransactionType(models.Model):
    name = models.CharField(max_length=50)
    requires_approval = models.BooleanField(default=False)

    def __str__(self):
        return self.name

class PaymentMethod(models.Model):
    name = models.CharField(max_length=50, unique=True)
    allowed_currencies = models.JSONField(default=list)

    def __str__(self):
        return self.name

class Invoice(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    date = models.DateTimeField(auto_now_add=True)
    due_date = models.DateTimeField()
    paid_amount = models.DecimalField(max_digits=12, decimal_places=2, default=0)

    @property
    def total_amount(self):
        return sum(service.price * service.quantity for service in self.order.services.all())

    def __str__(self):
        return f"Factura #{self.id} - {self.order}"

class Payment(models.Model):
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)
    method = models.ForeignKey(PaymentMethod, on_delete=models.CASCADE)
    transaction_type = models.ForeignKey(TransactionType, on_delete=models.PROTECT)
    date = models.DateTimeField(auto_now_add=True)
    amount = models.DecimalField(max_digits=12, decimal_places=2)
    currency = models.CharField(max_length=3, default='USD')

    def __str__(self):
        return f"Pago de {self.amount} {self.currency} para {self.invoice}"

# ---------------------- Servicios y Catálogo ----------------------
class Service(models.Model):
    SERVICE_CODES = [
        ('MKT', 'Marketing'),
        ('DEV', 'Development'),
        ('DSGN', 'Design'),
        ('SMM', 'Social Media'),
        ('BRND', 'Branding'),
        ('AVP', 'Audiovisual Production Services'),
        ('PRNT', 'Imprenta')
    ]
    
    code = models.CharField(max_length=10, primary_key=True, choices=SERVICE_CODES)
    name = models.CharField(max_length=255, blank=True)
    is_active = models.BooleanField(default=True)
    ventulab = models.BooleanField(default=False)
    has_subservices = models.BooleanField(default=False)
    campaign = models.ForeignKey('Campaign', on_delete=models.SET_NULL, null=True, blank=True)

    def save(self, *args, **kwargs):
        if not self.name:
            name_mapping = dict(self.SERVICE_CODES)
            self.name = name_mapping.get(self.code, '')
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.code} - {self.name}"

class SubService(models.Model):
    service = models.ForeignKey(Service, on_delete=models.CASCADE, related_name="subservices")
    name = models.CharField(max_length=255)
    description = models.TextField(null=True, blank=True)
    additional_cost = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)

    def __str__(self):
        return f"{self.service} - {self.name}"

class Price(models.Model):
    service = models.ForeignKey(Service, on_delete=models.CASCADE)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    currency = models.CharField(max_length=3, default='USD')
    effective_date = models.DateField(auto_now_add=True)

    class Meta:
        get_latest_by = 'effective_date'

    def __str__(self):
        return f"{self.service} - {self.amount} {self.currency}"

# ---------------------- Campañas y Marketing ----------------------
class Campaign(models.Model):
    campaign_code = models.CharField(max_length=10, primary_key=True)
    campaign_name = models.CharField(max_length=255)
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)
    description = models.TextField(null=True, blank=True)
    target_audience = models.JSONField(default=dict)

    def __str__(self):
        return f"{self.campaign_code} - {self.campaign_name}"

class CampaignService(models.Model):
    campaign = models.ForeignKey(Campaign, on_delete=models.CASCADE)
    service = models.ForeignKey(Service, on_delete=models.CASCADE)
    discount_percentage = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    additional_details = models.TextField(null=True, blank=True)

    def __str__(self):
        return f"{self.campaign} - {self.service}"

# ---------------------- Proveedores y Colaboradores ----------------------
class Provider(models.Model):
    name = models.CharField(max_length=255)
    representative = models.CharField(max_length=255, null=True, blank=True)
    services = models.ManyToManyField(Service)
    rating = models.DecimalField(max_digits=3, decimal_places=1, default=5.0)

    def __str__(self):
        return self.name

# ---------------------- Mejoras Adicionales ----------------------
class Notification(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    message = models.TextField()
    read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    link = models.URLField(null=True, blank=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return f"Notificación para {self.user}"

class AuditLog(models.Model):
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    action = models.CharField(max_length=100)
    timestamp = models.DateTimeField(auto_now_add=True)
    details = models.JSONField(default=dict)

    class Meta:
        ordering = ['-timestamp']

    def __str__(self):
        return f"{self.timestamp} - {self.action}"

@receiver(post_save, sender=Service)
def create_initial_price(sender, instance, created, **kwargs):
    if created:
        Price.objects.create(
            service=instance,
            amount=100.00,
            currency='USD'
        )


from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import (
    FormResponseViewSet,
    CustomerViewSet,
    EmployeeViewSet,
    OrderViewSet,
    DeliverableViewSet,
    ServiceViewSet,
    CampaignViewSet,
    InvoiceViewSet,
    PaymentViewSet,
    CustomTokenObtainPairView
)

# Crear un router
router = DefaultRouter()

# Registrar ViewSets en el router sin necesidad de basename, solo cuando sea necesario
router.register(r'form_responses', FormResponseViewSet, basename='form_responses')  # Aquí usamos basename porque es necesario
router.register(r'customers', CustomerViewSet)
router.register(r'employees', EmployeeViewSet)
router.register(r'orders', OrderViewSet)
router.register(r'deliverables', DeliverableViewSet, basename='deliverables')  # Agrega basename aquí
router.register(r'services', ServiceViewSet)
router.register(r'campaigns', CampaignViewSet)
router.register(r'invoices', InvoiceViewSet, basename='invoices')  # Agrega basename aquí
router.register(r'payments', PaymentViewSet, basename='payments')  # Agrega basename aquí

# Definir las rutas
urlpatterns = [
    # Incluir todas las URLs generadas por el router
    path('', include(router.urls)),

    # URL personalizada para la acción de creación masiva de respuestas
    path('form_responses/bulk_create/', FormResponseViewSet.as_view({'post': 'bulk_create'}), name='bulk-create-response'),

    # URL personalizada para obtener el token de autenticación (JWT)
    path('token/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),
]



        