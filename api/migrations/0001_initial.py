# Generated by Django 5.0.14 on 2025-04-13 12:46

import datetime
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('campaign_code', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('campaign_name', models.CharField(max_length=255)),
                ('start_date', models.DateTimeField(help_text='Fecha y hora de inicio de la campaña')),
                ('end_date', models.DateTimeField(blank=True, help_text='Fecha y hora de fin (opcional)', null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('target_audience', models.JSONField(blank=True, default=dict, help_text='Descripción del público objetivo (JSON)')),
                ('budget', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='¿La campaña está activa actualmente?')),
            ],
            options={
                'verbose_name': 'Campaña',
                'verbose_name_plural': 'Campañas',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Form',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Formulario',
                'verbose_name_plural': 'Formularios',
            },
        ),
        migrations.CreateModel(
            name='JobPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('permissions', models.JSONField(blank=True, default=dict, help_text='Permisos específicos para este puesto (estructura JSON)')),
            ],
            options={
                'verbose_name': 'Puesto de Trabajo',
                'verbose_name_plural': 'Puestos de Trabajo',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Ej: Transferencia, Tarjeta, PayPal', max_length=50, unique=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Método de Pago',
                'verbose_name_plural': 'Métodos de Pago',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('contact_person', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=30, null=True)),
                ('rating', models.DecimalField(decimal_places=1, default=Decimal('5.0'), help_text='Calificación interna (1-5)', max_digits=3)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True, help_text='Notas internas sobre el proveedor')),
            ],
            options={
                'verbose_name': 'Proveedor',
                'verbose_name_plural': 'Proveedores',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('code', models.CharField(help_text='Código corto de la categoría (ej. MKT, DEV)', max_length=10, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nombre descriptivo de la categoría', max_length=100)),
            ],
            options={
                'verbose_name': 'Categoría de Servicio',
                'verbose_name_plural': 'Categorías de Servicios',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TransactionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Ej: Pago Cliente, Reembolso, Gasto Proveedor', max_length=50, unique=True)),
                ('requires_approval', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Tipo de Transacción',
                'verbose_name_plural': 'Tipos de Transacciones',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(help_text='Descripción de la acción realizada', max_length=255)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('details', models.JSONField(blank=True, default=dict, help_text='Detalles adicionales en formato JSON')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Registro de Auditoría',
                'verbose_name_plural': 'Registros de Auditoría',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=30, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('country', django_countries.fields.CountryField(blank=True, help_text='País del cliente', max_length=2, null=True)),
                ('company_name', models.CharField(blank=True, help_text='Nombre de la empresa (si aplica)', max_length=150, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('preferred_contact_method', models.CharField(blank=True, choices=[('email', 'Email'), ('phone', 'Teléfono'), ('whatsapp', 'WhatsApp'), ('other', 'Otro')], max_length=20, null=True)),
                ('brand_guidelines', models.FileField(blank=True, null=True, upload_to='customers/brand_guidelines/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Cliente',
                'verbose_name_plural': 'Clientes',
                'ordering': ['user__first_name', 'user__last_name'],
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hire_date', models.DateField(default=datetime.date.today)),
                ('address', models.TextField(blank=True, null=True)),
                ('salary', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employee_profile', to=settings.AUTH_USER_MODEL)),
                ('position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='api.jobposition')),
            ],
            options={
                'verbose_name': 'Empleado',
                'verbose_name_plural': 'Empleados',
                'ordering': ['user__first_name', 'user__last_name'],
            },
        ),
        migrations.CreateModel(
            name='FormQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('order', models.PositiveIntegerField(default=0, help_text='Orden de aparición en el formulario')),
                ('required', models.BooleanField(default=True)),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='api.form')),
            ],
            options={
                'verbose_name': 'Pregunta de Formulario',
                'verbose_name_plural': 'Preguntas de Formularios',
                'ordering': ['form', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('read', models.BooleanField(db_index=True, default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('link', models.URLField(blank=True, help_text='Enlace relevante (ej. a un pedido, tarea)', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notificación',
                'verbose_name_plural': 'Notificaciones',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_received', models.DateTimeField(auto_now_add=True)),
                ('date_required', models.DateTimeField(help_text='Fecha límite solicitada por el cliente')),
                ('status', models.CharField(choices=[('DRAFT', 'Borrador'), ('CONFIRMED', 'Confirmado'), ('PLANNING', 'Planificación'), ('IN_PROGRESS', 'En Progreso'), ('QUALITY_CHECK', 'Control de Calidad'), ('PENDING_DELIVERY', 'Pendiente Entrega'), ('DELIVERED', 'Entregado'), ('CANCELLED', 'Cancelado'), ('ON_HOLD', 'En Espera')], db_index=True, default='DRAFT', max_length=20)),
                ('payment_due_date', models.DateTimeField(blank=True, help_text='Fecha límite para el pago (si aplica)', null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('priority', models.PositiveIntegerField(default=3, help_text='Prioridad (ej. 1=Alta, 5=Baja)')),
                ('completed_at', models.DateTimeField(blank=True, editable=False, help_text="Fecha y hora de finalización (status='DELIVERED')", null=True)),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, help_text='Calculado de OrderService. Actualizado automáticamente.', max_digits=12)),
                ('customer', models.ForeignKey(help_text='Cliente que realiza el pedido', on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='api.customer')),
                ('employee', models.ForeignKey(blank=True, help_text='Empleado responsable principal', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_orders', to='api.employee')),
            ],
            options={
                'verbose_name': 'Pedido',
                'verbose_name_plural': 'Pedidos',
                'ordering': ['priority', '-date_received'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(blank=True, help_text='Número de factura (puede autogenerarse)', max_length=50, unique=True)),
                ('date', models.DateField(default=datetime.date.today, help_text='Fecha de emisión de la factura')),
                ('due_date', models.DateField(help_text='Fecha de vencimiento del pago')),
                ('paid_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=12)),
                ('status', models.CharField(choices=[('DRAFT', 'Borrador'), ('SENT', 'Enviada'), ('PAID', 'Pagada'), ('PARTIALLY_PAID', 'Parcialmente Pagada'), ('OVERDUE', 'Vencida'), ('CANCELLED', 'Cancelada'), ('VOID', 'Anulada Post-Pago')], db_index=True, default='DRAFT', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Notas o términos de la factura')),
                ('order', models.ForeignKey(help_text='Pedido al que corresponde la factura', on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='api.order')),
            ],
            options={
                'verbose_name': 'Factura',
                'verbose_name_plural': 'Facturas',
                'ordering': ['-date', '-id'],
            },
        ),
        migrations.CreateModel(
            name='Deliverable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, help_text='Archivo entregable (opcional inicialmente)', null=True, upload_to='deliverables/%Y/%m/')),
                ('description', models.TextField(help_text='Descripción clara de la tarea o entregable')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('version', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('PENDING', 'Pendiente'), ('ASSIGNED', 'Asignado'), ('IN_PROGRESS', 'En Progreso'), ('PENDING_APPROVAL', 'Pendiente Aprobación Cliente'), ('PENDING_INTERNAL_APPROVAL', 'Pendiente Aprobación Interna'), ('REQUIRES_INFO', 'Requiere Info Adicional'), ('REVISION_REQUESTED', 'Revisión Solicitada'), ('APPROVED', 'Aprobado'), ('COMPLETED', 'Completado'), ('REJECTED', 'Rechazado')], db_index=True, default='PENDING', max_length=30)),
                ('due_date', models.DateField(blank=True, help_text='Fecha límite para este entregable', null=True)),
                ('feedback_notes', models.TextField(blank=True, help_text='Comentarios o feedback recibido')),
                ('assigned_employee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_deliverables', to='api.employee')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliverables', to='api.order')),
                ('assigned_provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_deliverables', to='api.provider')),
            ],
            options={
                'verbose_name': 'Entregable/Tarea',
                'verbose_name_plural': 'Entregables/Tareas',
                'ordering': ['order', 'due_date', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('code', models.CharField(help_text='Código único del servicio (ej. OD001)', max_length=10, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nombre descriptivo del servicio', max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='¿El servicio está activo y disponible para la venta?')),
                ('ventulab', models.BooleanField(default=False, help_text='¿Es un servicio interno o especial de Ventulab?')),
                ('is_package', models.BooleanField(default=False, help_text='¿Este servicio es un paquete que agrupa otros?')),
                ('is_subscription', models.BooleanField(default=False, help_text='¿Este servicio es una suscripción recurrente?')),
                ('audience', models.TextField(blank=True, help_text='Público objetivo principal de este servicio', null=True)),
                ('detailed_description', models.TextField(blank=True, help_text='Descripción más detallada del servicio', null=True)),
                ('problem_solved', models.TextField(blank=True, help_text='Qué problema o necesidad soluciona este servicio', null=True)),
                ('campaign', models.ForeignKey(blank=True, help_text='Campaña promocional asociada directa (opcional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='promoted_services', to='api.campaign')),
                ('category', models.ForeignKey(help_text='Categoría principal del servicio', on_delete=django.db.models.deletion.PROTECT, related_name='services', to='api.servicecategory')),
            ],
            options={
                'verbose_name': 'Servicio',
                'verbose_name_plural': 'Servicios',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.AddField(
            model_name='provider',
            name='services_provided',
            field=models.ManyToManyField(blank=True, help_text='Servicios que ofrece este proveedor', related_name='providers', to='api.service'),
        ),
        migrations.CreateModel(
            name='OrderService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('price', models.DecimalField(decimal_places=2, help_text='Precio unitario en el momento de añadir a la orden', max_digits=12)),
                ('note', models.TextField(blank=True, help_text='Notas específicas para este servicio en esta orden')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='api.order')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order_lines', to='api.service')),
            ],
            options={
                'verbose_name': 'Servicio del Pedido',
                'verbose_name_plural': 'Servicios del Pedido',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ServiceFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature_type', models.CharField(choices=[('differentiator', 'Diferenciador'), ('benefit', 'Beneficio'), ('caracteristicas', 'Características'), ('process', 'Proceso'), ('result', 'Resultado Esperado')], help_text='Tipo de característica', max_length=20)),
                ('description', models.TextField(help_text='Descripción de la característica, beneficio, etc.')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='api.service')),
            ],
            options={
                'verbose_name': 'Característica de Servicio',
                'verbose_name_plural': 'Características de Servicios',
                'ordering': ['service', 'feature_type'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='Fecha y hora en que se registró el pago')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('currency', models.CharField(default='EUR', max_length=3)),
                ('status', models.CharField(choices=[('PENDING', 'Pendiente'), ('COMPLETED', 'Completado'), ('FAILED', 'Fallido'), ('REFUNDED', 'Reembolsado')], db_index=True, default='COMPLETED', max_length=20)),
                ('transaction_id', models.CharField(blank=True, help_text='ID de la transacción externa si aplica', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, help_text='Notas sobre el pago')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='api.invoice')),
                ('method', models.ForeignKey(help_text='Método utilizado para el pago', on_delete=django.db.models.deletion.PROTECT, to='api.paymentmethod')),
                ('transaction_type', models.ForeignKey(help_text='Tipo de transacción (ej. pago, reembolso)', on_delete=django.db.models.deletion.PROTECT, to='api.transactiontype')),
            ],
            options={
                'verbose_name': 'Pago',
                'verbose_name_plural': 'Pagos',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='FormResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Respuesta proporcionada por el cliente')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_responses', to='api.customer')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='api.form')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='api.formquestion')),
            ],
            options={
                'verbose_name': 'Respuesta de Formulario',
                'verbose_name_plural': 'Respuestas de Formularios',
                'ordering': ['created_at'],
                'unique_together': {('customer', 'form', 'question')},
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('currency', models.CharField(default='EUR', help_text='Código ISO 4217 (ej. EUR, USD, CLP, COP)', max_length=3)),
                ('effective_date', models.DateField(default=datetime.date.today, help_text='Fecha desde la que este precio es válido')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_history', to='api.service')),
            ],
            options={
                'verbose_name': 'Precio Histórico',
                'verbose_name_plural': 'Historial de Precios',
                'ordering': ['service', 'currency', '-effective_date'],
                'get_latest_by': 'effective_date',
                'unique_together': {('service', 'currency', 'effective_date')},
            },
        ),
        migrations.CreateModel(
            name='CampaignService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Descuento aplicado a este servicio en la campaña (%)', max_digits=5)),
                ('additional_details', models.TextField(blank=True, null=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='included_services', to='api.campaign')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaign_assignments', to='api.service')),
            ],
            options={
                'verbose_name': 'Servicio de Campaña',
                'verbose_name_plural': 'Servicios de Campañas',
                'unique_together': {('campaign', 'service')},
            },
        ),
    ]
